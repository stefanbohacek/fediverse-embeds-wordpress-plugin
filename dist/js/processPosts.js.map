{"version":3,"file":"processPosts.js","names":["fetchData","getPostData","renderPost","dispatchEvent","processPosts","postsEmbeds","document","querySelectorAll","posts","renderedPostElements","post","postData","push","length","Promise","all","map","action","nonce","ftf_fediverse_embeds","JSON","stringify","response","renderedPostElement","altTextBadges","getElementsByClassName","forEach","el","addEventListener","ev","preventDefault","target","title","alert"],"sources":["processPosts.js"],"sourcesContent":["import { fetchData } from \"./fetchData.js\";\r\nimport { getPostData } from \"./getPostData.js\";\r\nimport { renderPost } from \"./renderPost.js\";\r\nimport { dispatchEvent } from \"./dispatchEvent.js\";\r\n\r\nconst processPosts = async (fn) => {\r\n  const postsEmbeds = document.querySelectorAll('blockquote.ftf-fediverse-post-embed');\r\n  let posts = [];\r\n  let renderedPostElements = [];\r\n\r\n  for (const post of postsEmbeds) {\r\n    const postData = getPostData(post);\r\n    posts.push(postData);\r\n  }\r\n  \r\n  // console.log('post data', posts);\r\n\r\n  if (posts.length){\r\n    await Promise.all(\r\n      posts.map(\r\n        async post => {\r\n      await fetchData({\r\n        action: 'ftf_get_post',\r\n        nonce: ftf_fediverse_embeds.nonce,\r\n        post: JSON.stringify(post)\r\n      }, (response) => {\r\n        // console.log('ftf_get_post', {post, response});\r\n        const renderedPostElement = renderPost(response);\r\n        renderedPostElements.push(renderedPostElement);\r\n      });\r\n    }));\r\n\r\n    const altTextBadges = document.getElementsByClassName(\"ftf-fediverse-post-alt-text\");\r\n\r\n    if (altTextBadges && altTextBadges.length){\r\n      [...altTextBadges].forEach(el => {\r\n        el.addEventListener(\"click\", (ev) => {\r\n          ev.preventDefault();\r\n          if (ev.target.title){\r\n            alert(ev.target.title);\r\n          }\r\n          return false;\r\n        });\r\n      })\r\n    }\r\n\r\n    dispatchEvent('ftf_fediverse_embeds_posts_processed', renderedPostElements);\r\n  }\r\n};\r\n\r\nexport { processPosts };\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,gBAAgB,CAC1C,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,UAAU,KAAQ,iBAAiB,CAC5C,OAASC,aAAa,KAAQ,oBAAoB,CAElD,KAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAc,CACjC,KAAM,CAAAC,WAAW,CAAGC,QAAQ,CAACC,gBAAgB,CAAC,qCAAqC,CAAC,CAAC,GACjF,CAAAC,KAAK,CAAG,EAAE,CACVC,oBAAoB,CAAG,EAAE,CAE7B,IAAK,KAAM,CAAAC,IAAI,GAAI,CAAAL,WAAW,CAAE,CAC9B,KAAM,CAAAM,QAAQ,CAAGV,WAAW,CAACS,IAAI,CAAC,CAClCF,KAAK,CAACI,IAAI,CAACD,QAAQ,CACrB,CAEA;AAEA,GAAIH,KAAK,CAACK,MAAM,CAAC,CACf,KAAM,CAAAC,OAAO,CAACC,GAAG,CACfP,KAAK,CAACQ,GAAG,CACP,KAAM,CAAAN,IAAI,EAAI,CAChB,KAAM,CAAAV,SAAS,CAAC,CACdiB,MAAM,CAAE,cAAc,CACtBC,KAAK,CAAEC,oBAAoB,CAACD,KAAK,CACjCR,IAAI,CAAEU,IAAI,CAACC,SAAS,CAACX,IAAI,CAC3B,CAAC,CAAGY,QAAQ,EAAK,CACf;AACA,KAAM,CAAAC,mBAAmB,CAAGrB,UAAU,CAACoB,QAAQ,CAAC,CAChDb,oBAAoB,CAACG,IAAI,CAACW,mBAAmB,CAC/C,CAAC,CACH,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAC,aAAa,CAAGlB,QAAQ,CAACmB,sBAAsB,CAAC,6BAA6B,CAAC,CAEhFD,aAAa,EAAIA,aAAa,CAACX,MAAM,EACvC,CAAC,GAAGW,aAAa,CAAC,CAACE,OAAO,CAACC,EAAE,EAAI,CAC/BA,EAAE,CAACC,gBAAgB,CAAC,OAAO,CAAGC,EAAE,GAC9BA,EAAE,CAACC,cAAc,CAAC,CAAC,CACfD,EAAE,CAACE,MAAM,CAACC,KAAK,EACjBC,KAAK,CAACJ,EAAE,CAACE,MAAM,CAACC,KAAK,CAAC,IAGzB,CACH,CAAC,CAAC,CAGJ7B,aAAa,CAAC,sCAAsC,CAAEM,oBAAoB,CAC5E,CACF,CAAC,CAED,OAASL,YAAY"}